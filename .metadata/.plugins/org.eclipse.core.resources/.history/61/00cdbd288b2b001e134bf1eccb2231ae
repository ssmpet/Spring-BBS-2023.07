package com.ys.sbbs.controller;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ys.sbbs.entity.User;
import com.ys.sbbs.service.UserService;
import com.ys.sbbs.utility.AsideUtil;

@Controller
@RequestMapping("/user")
public class UserController {

	@Autowired private UserService userService;
	@Value("${spring.servlet.multipart.location}") private String uploadDir;
	@Autowired ServletContext servletContext;
	
	public static final int LIST_PER_PAGE = 10;		// 한 페이지당 사용자 목록의 갯수
	public static final int PAGE_PER_SCREEN = 10;	// 한 화면에 표시되는 페이지 갯수
	public static final String TODAY_QUOTE = "/static/data/todayQuote.txt";
	public static final String PROFILE_PATH = "/static/profile/";

	@GetMapping("/register")
	public String registerForm() {
		return "user/register";
	}

	@PostMapping("/register")
	public String registerProc(MultipartHttpServletRequest req, Model model) {

		String uid  = req.getParameter("uid");
		String pwd  = req.getParameter("pwd");
		String pwd2 = req.getParameter("pwd2");
		String uname = req.getParameter("uname");
		String email = req.getParameter("email");
		String addr  = req.getParameter("addr");
		User user = null;
		String filename = null;

		MultipartFile filePart = req.getFile("profile");
		
		if ( userService.getUser(uid) != null ) {
			model.addAttribute("msg", "사용자 ID가 중복되었습니다. ");
			model.addAttribute("url", "/sbbs/user/register");
		} else if ( !pwd.equals(pwd2) || pwd.length() < 2 ) {
			model.addAttribute("msg", "패스워드 입력이 잘못되었습니다.");
			model.addAttribute("url", "/sbbs/user/register");
		} else {

			if ( filePart != null ) {
				filename = filePart.getOriginalFilename();

				String path = this.getClass().getResource("/").getPath() + PROFILE_PATH;
				System.out.println("profile_path = " + path.substring(1));
				String profilePath = uploadDir + "profile/" + filename;
				
				try {
					filePart.transferTo(new File(profilePath));
				} catch (Exception e) {
					e.printStackTrace();
				}

				AsideUtil au = new AsideUtil();
				filename = au.squareImage(uploadDir + "profile/", filename);
			}

			String hashedPwd = BCrypt.hashpw(pwd, BCrypt.gensalt());
			user = new User(uid, hashedPwd, uname, email, filename, addr);
			userService.insertUser(user);
			model.addAttribute("msg", "등록을 마쳤습니다. 로그인 하세요.");
			model.addAttribute("url", "/sbbs/user/login");
		}

		return "common/alertMsg";
	}

	@GetMapping("/login")
	public String loginForm() {
		return "user/login";
	}
	
	@PostMapping("/login")
	public String loginProc(String uid, String pwd, HttpSession session, Model model) throws Exception {
		
		int result = userService.login(uid, pwd);
		
		if (result == UserService.CORRECT_LOGIN) {

			User user = userService.getUser(uid);
			session.setAttribute("uid", uid);
			session.setAttribute("uname", user.getUname());
			session.setAttribute("email", user.getEmail());
			session.setAttribute("profile", user.getProfile());
			session.setAttribute("addr", user.getAddr());
			
			// 상태 메세지
			String path = getClass().getResource(TODAY_QUOTE).getPath();
//			System.out.println("PATH = " + path);
//			String quoteFile = uploadDir + "data/todayQuote.txt";
			String quoteFile = path.substring(1);
			
			AsideUtil au = new AsideUtil();
			String stateMsg = au.getTodayQuote(quoteFile);
			session.setAttribute("stateMsg", stateMsg);
			
			model.addAttribute("msg", user.getUname() + "님 환영합니다.");
			model.addAttribute("url", "/sbbs/user/list/1");
			
		} else if (result == UserService.WRONG_PASSWORD) {
			
			model.addAttribute("msg", "잘못되 패스워드 입니다. 다시 입력하세요.");
			model.addAttribute("url", "/sbbs/user/login");
			
		}else {
			
			model.addAttribute("msg", "ID가 없습니다. 회원 가입 페이지로 이동합니다.");
			model.addAttribute("url", "/sbbs/user/register");
		}
		
		return "common/alertMsg";
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/user/login";
	}
	
	@GetMapping("/list/{page}")
	public String listUser(@PathVariable int page, HttpSession session, Model model) {

		List<User> list = userService.getUserList(page);
		model.addAttribute("userList", list);
		
		int totalUsers = userService.getUserCount();
		int totalPages = (int) (Math.ceil(totalUsers / (double) LIST_PER_PAGE));
		int startPage = (int) Math.ceil((page - 0.5) / PAGE_PER_SCREEN - 1) * PAGE_PER_SCREEN + 1;
		int endPage = Math.min(totalPages, startPage + PAGE_PER_SCREEN - 1);
		
		List<String> pageList = new ArrayList<String>();
		for (int i=startPage; i<=endPage; i++) {
			pageList.add(String.valueOf(i));
		}
		session.setAttribute("currentUserPage", page);
		
		model.addAttribute("pageList", pageList);
		model.addAttribute("totalPages", totalPages);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);
		
//		model.addAttribute("page", page);
		
		return "user/list";
	}
	
	@GetMapping("/update/{uid}")
	public String updateForm(@PathVariable String uid, Model model) {

		User user = userService.getUser(uid);
		model.addAttribute("user", user);
		return "user/update";
	}
	
	@PostMapping("/update")
	public String updateProc(MultipartHttpServletRequest req, HttpSession session, Model model) {
		String uid  = req.getParameter("uid");
		String uname = req.getParameter("uname");
		String email = req.getParameter("email");
		String addr  = req.getParameter("addr");
		String oldFilename = req.getParameter("filename");
		MultipartFile filePart = req.getFile("profile");
		
		User user = null;
		String filename = null;
		
		if (filePart != null) {			// 새로운 이미지로 변경
			
			if (oldFilename != null) {	// 기존 이미지가 있으면 이미지 삭제
				
				File oldFile = new File(uploadDir + "profile/" + oldFilename);
				oldFile.delete();
			}
			// 이미지를 저장하고, 스퀘어 이미지로 변경. register code와 동일
			filename = filePart.getOriginalFilename();
			String profilePath = uploadDir + "profile/" + filename;
			try {
				filePart.transferTo(new File(profilePath));
			} catch (Exception e) {
				e.printStackTrace();
			}

			AsideUtil au = new AsideUtil();
			filename = au.squareImage(uploadDir + "profile/", filename);			

		} else
			filename = oldFilename;

		user = new User(uid, uname, email, filename, addr);
		userService.updateUser(user);
		session.setAttribute("uname", uname);
		session.setAttribute("email", email);
		session.setAttribute("profile", filename);
		session.setAttribute("addr", addr);
		
		return "redirect:/user/list/" + session.getAttribute("currentUserPage");
	}
	
	@GetMapping("/updatePwd/{uid}")
	public String updatePwdForm(@PathVariable String uid, Model model) {
		model.addAttribute("uid", uid);
		return "user/updatePwd";
	}
	
	@PostMapping("/updatePwd") 
	public String updatePwdProc(HttpServletRequest req, Model model) {
		String uid = req.getParameter("uid");
		String pwd = req.getParameter("pwd");
		String pwd2 = req.getParameter("pwd2");
		
		// 패스워드 확인
		if ( !(pwd == null || pwd.equals("")) ) {
			// 패스워드와 패스워드확인이 같지 않으면 
			if (!pwd.equals(pwd2)) {
				model.addAttribute("msg", "패스워드 입력이 잘못되었습니다.");
				model.addAttribute("url", "/sbbs/user/updatePwd/" + uid);
			} else {

				pwd = BCrypt.hashpw(pwd, BCrypt.gensalt());
				userService.updateUserPassword(pwd, uid);
				model.addAttribute("msg", "패스워드가 변경되었습니다.");
				model.addAttribute("url", "/sbbs/user/update/" + uid);
			}
		} else {
			
			model.addAttribute("msg", "패스워드를 입력하지 않았습니다.");
			model.addAttribute("url", "/sbbs/user/updatePwd/" + uid);
		}

		return "common/alertMsg";		
	}
	
	@GetMapping("/delete/{uid}")
	public String delete(@PathVariable String uid, Model model) {
		model.addAttribute("uid", uid);
		return "user/delete";		
	}

	@GetMapping("/deleteConfirm/{uid}")
	public String deleteConfirm(@PathVariable String uid, HttpSession session) {
		userService.deleteUser(uid);
		return "redirect:/user/list/" + session.getAttribute("currentUserPage"); 
	}
	
}
